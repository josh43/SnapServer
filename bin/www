#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('untitled:server');
var http = require('http');

var DEBUGGING =0;
/**
 * Get port from  environment and store in Express.
 */
//var port = normalizePort(process.env.PORT || '3000');

var port;
/**
 * Create HTTP server.
 */

var server;
/*Command line arguments --- first should be ip(string) second should be port(int_16)
 * if no arguments than defaults to debugging
 *
 * vvvvvvvvv   this is an example vvvvvvvvv
 * /usr/local/bin/node bin/www '41.212.56.7' '8080'
 */


var commandArgs = process.argv.slice(2);
if(commandArgs.length > 0) {
  port = normalizePort(commandArgs[1]);
  app.set('port', port);
  server = http.createServer(app);
  server.listen(port,commandArgs[0]);


}else{
  app.set('port', process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || 8080);
  app.set('ip', process.env.OPENSHIFT_NODEJS_IP || "127.0.0.1");
  server = http.createServer(app);
  server.listen(app.get('port'),app.get('ip'));
}


server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//onListening();